"use client"

import React, { useState, useEffect, useRef } from "react"
import { MapContainer, TileLayer, Marker, Popup, useMapEvents, useMap } from "react-leaflet"
import L from "leaflet"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { MapPin, Edit, Trash2, Plus, Search, X, Loader2, Globe, Building, Users, Construction, Calendar } from "lucide-react"
import { toast } from "sonner"

// Fix for default markers in react-leaflet
delete (L.Icon.Default.prototype as any)._getIconUrl
L.Icon.Default.mergeOptions({
  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-icon-2x.png',
  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-icon.png',
  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-shadow.png',
})

export interface CleanLocation {
  id: string
  coverage_category: string
  location_name: string
  description: string
  administrative_region?: string
  latitude?: number
  longitude?: number
}

interface CleanLocationsTabProps {
  locations: CleanLocation[]
  onChange: (locations: CleanLocation[]) => void
}

interface NominatimResult {
  place_id: number
  display_name: string
  lat: string
  lon: string
  address?: {
    country?: string
    state?: string
    county?: string
    city?: string
    town?: string
    village?: string
    suburb?: string
    neighbourhood?: string
  }
}

// Simplified Coverage Categories
const COVERAGE_CATEGORIES = [
  { value: "specific_location", label: "Specific Location", needsMap: true, icon: MapPin },
  { value: "city_wide", label: "City-Wide Activity", needsMap: false, icon: Building },
  { value: "provincial", label: "Provincial/State-Wide", needsMap: false, icon: Globe },
  { value: "multi_region", label: "Multi-Regional", needsMap: false, icon: Users },
  { value: "national", label: "National Activity", needsMap: false, icon: Globe },
  { value: "cross_border", label: "Regional Cross-Border", needsMap: false, icon: Globe }
]

// Map component that updates when coordinates change
function MapUpdater({ center, zoom }: { center: [number, number], zoom: number }) {
  const map = useMap()
  
  useEffect(() => {
    if (center[0] !== 0 || center[1] !== 0) {
      map.setView(center, zoom)
    }
  }, [center, zoom, map])
  
  return null
}

// Custom hook for map click events
function MapClickHandler({ onMapClick }: { onMapClick: (latlng: L.LatLng) => void }) {
  useMapEvents({
    click: (e) => {
      onMapClick(e.latlng)
    }
  })
  return null
}

// Enhanced location search component
function LocationSearch({ 
  onLocationSelect, 
  initialValue = "" 
}: { 
  onLocationSelect: (location: { lat: number, lng: number, name: string, address?: any }) => void
  initialValue?: string
}) {
  const [searchQuery, setSearchQuery] = useState(initialValue)
  const [searchResults, setSearchResults] = useState<NominatimResult[]>([])
  const [isSearching, setIsSearching] = useState(false)
  const [showResults, setShowResults] = useState(false)
  const searchTimeout = useRef<NodeJS.Timeout>()

  const searchLocations = async (query: string) => {
    if (!query.trim()) {
      setSearchResults([])
      setShowResults(false)
      return
    }

    setIsSearching(true)
    try {
      const response = await fetch(
        `https://nominatim.openstreetmap.org/search?` +
        `format=json&q=${encodeURIComponent(query)}&limit=5&addressdetails=1&` +
        `accept-language=en&countrycodes=&dedupe=1`,
        { 
          headers: { 
            'User-Agent': 'AIMS-Activity-Editor/1.0',
            'Accept': 'application/json'
          } 
        }
      )
      
      if (!response.ok) {
        throw new Error('Search service unavailable')
      }
      
      const results = await response.json()
      setSearchResults(results)
      setShowResults(results.length > 0)
    } catch (error) {
      console.error('Search error:', error)
      toast.error('Failed to search locations. Please try again.')
      setSearchResults([])
      setShowResults(false)
    } finally {
      setIsSearching(false)
    }
  }

  const handleSearchChange = (value: string) => {
    setSearchQuery(value)
    
    if (searchTimeout.current) {
      clearTimeout(searchTimeout.current)
    }
    
    if (value.trim()) {
      searchTimeout.current = setTimeout(() => {
        searchLocations(value)
      }, 600)
    } else {
      setSearchResults([])
      setShowResults(false)
    }
  }

  const handleResultSelect = (result: NominatimResult) => {
    const lat = parseFloat(result.lat)
    const lng = parseFloat(result.lon)
    
    if (isNaN(lat) || isNaN(lng)) {
      toast.error('Invalid coordinates from search result')
      return
    }
    
    onLocationSelect({
      lat,
      lng,
      name: result.display_name,
      address: result.address
    })
    
    setSearchQuery(result.display_name)
    setSearchResults([])
    setShowResults(false)
    toast.success('Location found and pin placed')
  }

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    if (searchQuery.trim()) {
      searchLocations(searchQuery)
    }
  }

  return (
    <div className="relative">
      <form onSubmit={handleSubmit} className="flex gap-2">
        <div className="relative flex-1">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
          <Input
            placeholder="Search for an address or place name"
            value={searchQuery}
            onChange={(e) => handleSearchChange(e.target.value)}
            className="pl-10 pr-10"
          />
          {isSearching && (
            <Loader2 className="absolute right-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-blue-500 animate-spin" />
          )}
          {searchQuery && !isSearching && (
            <button
              type="button"
              onClick={() => {
                setSearchQuery("")
                setSearchResults([])
                setShowResults(false)
              }}
              className="absolute right-3 top-1/2 transform -translate-y-1/2"
            >
              <X className="h-4 w-4 text-gray-400 hover:text-gray-600" />
            </button>
          )}
        </div>
        <Button type="submit" variant="outline" disabled={isSearching || !searchQuery.trim()}>
          Search
        </Button>
      </form>

      {showResults && searchResults.length > 0 && (
        <div className="absolute z-50 w-full mt-1 bg-white border border-gray-200 rounded-md shadow-lg max-h-60 overflow-y-auto">
          {searchResults.map((result) => (
            <button
              key={result.place_id}
              onClick={() => handleResultSelect(result)}
              className="w-full text-left px-4 py-3 hover:bg-gray-50 border-b border-gray-100 last:border-b-0 focus:outline-none focus:bg-blue-50"
            >
              <div className="text-sm font-medium truncate">{result.display_name}</div>
              <div className="text-xs text-gray-500 mt-1 flex items-center gap-1">
                <MapPin className="h-3 w-3" />
                {parseFloat(result.lat).toFixed(4)}, {parseFloat(result.lon).toFixed(4)}
              </div>
            </button>
          ))}
        </div>
      )}
      
      {showResults && searchResults.length === 0 && !isSearching && searchQuery.trim() && (
        <div className="absolute z-50 w-full mt-1 bg-white border border-gray-200 rounded-md shadow-lg">
          <div className="px-4 py-3 text-sm text-gray-500">
            No locations found. Try a different search term.
          </div>
        </div>
      )}
    </div>
  )
}

// Location Form Component
function LocationForm({ 
  onAdd,
  editingLocation,
  onUpdate,
  onCancelEdit
}: { 
  onAdd: (location: Omit<CleanLocation, 'id'>) => void
  editingLocation?: CleanLocation | null
  onUpdate?: (location: CleanLocation) => void
  onCancelEdit?: () => void
}) {
  const [formData, setFormData] = useState({
    coverage_category: 'specific_location', // Default to show map
    location_name: '',
    description: '',
    administrative_region: '',
    latitude: 19.5, // Default to Myanmar center
    longitude: 96.5
  })

  const [mapKey, setMapKey] = useState(0)

  // Initialize form data with editing location if provided
  useEffect(() => {
    if (editingLocation) {
      setFormData({
        coverage_category: editingLocation.coverage_category,
        location_name: editingLocation.location_name,
        description: editingLocation.description,
        administrative_region: editingLocation.administrative_region || '',
        latitude: editingLocation.latitude || 19.5,
        longitude: editingLocation.longitude || 96.5
      })
      setMapKey(prev => prev + 1)
    }
  }, [editingLocation])

  // Get the selected category details
  const selectedCategory = COVERAGE_CATEGORIES.find(cat => cat.value === formData.coverage_category)
  const needsMap = selectedCategory?.needsMap || false
  const isEditing = !!editingLocation

  const handleLocationSelect = (searchLocation: { lat: number, lng: number, name: string, address?: any }) => {
    setFormData(prev => ({
      ...prev,
      latitude: searchLocation.lat,
      longitude: searchLocation.lng,
      location_name: prev.location_name || searchLocation.name.split(',')[0].trim(),
      administrative_region: searchLocation.address?.state || searchLocation.address?.country || prev.administrative_region
    }))
    setMapKey(prev => prev + 1)
  }

  const handleCoordinateChange = (field: 'latitude' | 'longitude', value: string) => {
    const numValue = parseFloat(value)
    if (!isNaN(numValue)) {
      setFormData(prev => ({ ...prev, [field]: numValue }))
      setMapKey(prev => prev + 1)
    }
  }

  const handleSubmit = () => {
    if (!formData.coverage_category) {
      toast.error('Please select a coverage category')
      return
    }

    if (!formData.location_name.trim()) {
      toast.error('Location name is required')
      return
    }
    
    if (needsMap && (formData.latitude === 19.5 && formData.longitude === 96.5) && !isEditing) {
      toast.error('Please set coordinates by clicking on the map or using search')
      return
    }

    const locationData = {
      coverage_category: formData.coverage_category,
      location_name: formData.location_name,
      description: formData.description,
      administrative_region: formData.administrative_region,
      ...(needsMap && {
        latitude: formData.latitude,
        longitude: formData.longitude
      })
    }

    if (isEditing && onUpdate && editingLocation) {
      // Update existing location
      onUpdate({
        ...locationData,
        id: editingLocation.id
      })
      toast.success('Location updated successfully!')
    } else {
      // Add new location
      onAdd(locationData)
      toast.success('Location added successfully!')
    }

    // Reset form only if not editing
    if (!isEditing) {
      setFormData({
        coverage_category: 'specific_location', // Default back to showing map
        location_name: '',
        description: '',
        administrative_region: '',
        latitude: 19.5,
        longitude: 96.5
      })
      setMapKey(prev => prev + 1)
    }
  }

  const handleCancel = () => {
    if (onCancelEdit) {
      onCancelEdit()
    }
    // Reset form
    setFormData({
      coverage_category: 'specific_location',
      location_name: '',
      description: '',
      administrative_region: '',
      latitude: 19.5,
      longitude: 96.5
    })
    setMapKey(prev => prev + 1)
  }

  return (
    <div className="space-y-6">
      {/* Coverage Category - Primary Driver */}
      <div className="space-y-2">
        <Label htmlFor="coverage_category" className="text-sm font-medium">
          Coverage Category <span className="text-red-500">*</span>
        </Label>
        <Select 
          value={formData.coverage_category} 
          onValueChange={(value) => setFormData(prev => ({ ...prev, coverage_category: value }))}
        >
          <SelectTrigger id="coverage_category">
            <SelectValue placeholder="Select coverage type" />
          </SelectTrigger>
          <SelectContent>
            {COVERAGE_CATEGORIES.map((category) => {
              const IconComponent = category.icon
              return (
                <SelectItem key={category.value} value={category.value}>
                  <div className="flex items-center gap-2">
                    <IconComponent className="h-4 w-4" />
                    {category.label}
                  </div>
                </SelectItem>
              )
            })}
          </SelectContent>
        </Select>
        <p className="text-xs text-gray-500 flex items-center gap-1">
          {needsMap ? (
            <>
              <MapPin className="h-3 w-3" />
              Map and coordinates will be used for this specific location
            </>
          ) : (
            <>
              <Globe className="h-3 w-3" />
              This covers a broader area - no specific coordinates needed
            </>
          )}
        </p>
      </div>

      {/* Conditional Map Section - Only for Specific Locations */}
      {needsMap && (
        <>
          {/* Address Search */}
          <div className="space-y-2">
            <Label className="text-sm font-medium">Search for Location (Optional)</Label>
            <LocationSearch onLocationSelect={handleLocationSelect} />
            <p className="text-xs text-gray-500">
              Search to auto-fill coordinates and place a pin
            </p>
          </div>

          {/* Interactive Map */}
          <div className="space-y-2">
            <Label className="text-sm font-medium">Location on Map</Label>
            <div className="relative w-full h-64 overflow-hidden rounded border border-gray-300 bg-gray-100">
              <MapContainer
                key={mapKey}
                center={[formData.latitude, formData.longitude]}
                zoom={formData.latitude !== 19.5 || formData.longitude !== 96.5 ? 12 : 6}
                style={{ height: '100%', width: '100%', zIndex: 0 }}
                scrollWheelZoom={true}
                doubleClickZoom={true}
                zoomControl={true}
                whenReady={() => {
                  // Map is ready - can add additional setup here if needed
                }}
              >
                <TileLayer
                  url="https://maps.wikimedia.org/osm-intl/{z}/{x}/{y}.png"
                  attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors | Wikimedia'
                  maxZoom={18}
                />
                <MapUpdater 
                  center={[formData.latitude, formData.longitude]} 
                  zoom={formData.latitude !== 19.5 || formData.longitude !== 96.5 ? 12 : 6}
                />
                <MapClickHandler 
                  onMapClick={(latlng) => {
                    setFormData(prev => ({
                      ...prev,
                      latitude: latlng.lat,
                      longitude: latlng.lng
                    }))
                  }}
                />
                <Marker position={[formData.latitude, formData.longitude]}>
                  <Popup>
                    <div className="text-sm">
                      <div className="font-medium">{formData.location_name || 'New Location'}</div>
                      <div className="text-xs text-gray-600 mt-1">
                        {formData.latitude.toFixed(4)}, {formData.longitude.toFixed(4)}
                      </div>
                    </div>
                  </Popup>
                </Marker>
              </MapContainer>
            </div>
            <p className="text-xs text-gray-500">Click anywhere on the map to place or move the pin</p>
          </div>

          {/* Coordinates Display */}
          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="latitude" className="text-sm font-medium">Latitude</Label>
              <Input
                id="latitude"
                type="number"
                step="any"
                value={formData.latitude}
                onChange={(e) => handleCoordinateChange('latitude', e.target.value)}
                placeholder="0.000000"
                className="font-mono text-sm"
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="longitude" className="text-sm font-medium">Longitude</Label>
              <Input
                id="longitude"
                type="number"
                step="any"
                value={formData.longitude}
                onChange={(e) => handleCoordinateChange('longitude', e.target.value)}
                placeholder="0.000000"
                className="font-mono text-sm"
              />
            </div>
          </div>
        </>
      )}

      {/* Core Fields - Always Visible */}
      <div className="grid grid-cols-1 gap-4">
        <div className="space-y-2">
          <Label htmlFor="location_name" className="text-sm font-medium">
            Location Name <span className="text-red-500">*</span>
          </Label>
          <Input
            id="location_name"
            value={formData.location_name}
            onChange={(e) => setFormData(prev => ({ ...prev, location_name: e.target.value }))}
            placeholder={needsMap ? "e.g., Health Clinic, Lashio" : "e.g., Mandalay Region Health Program"}
            required
          />
        </div>

        <div className="space-y-2">
          <Label htmlFor="administrative_region" className="text-sm font-medium">
            Administrative Region
          </Label>
          <Input
            id="administrative_region"
            value={formData.administrative_region}
            onChange={(e) => setFormData(prev => ({ ...prev, administrative_region: e.target.value }))}
            placeholder={needsMap ? "e.g., Shan State, Lashio Township" : "e.g., Mandalay Region, Northern Districts"}
          />
          <p className="text-xs text-gray-500">
            {needsMap ? "Province/State and District where this specific location is situated" : "Primary administrative areas covered by this program"}
          </p>
        </div>

        <div className="space-y-2">
          <Label htmlFor="description" className="text-sm font-medium">Description</Label>
          <Textarea
            id="description"
            value={formData.description}
            onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
            placeholder={needsMap ? "Describe what happens at this location" : "Describe the scope and nature of activities in this coverage area"}
            rows={3}
            className="resize-none"
          />
        </div>
      </div>

      {/* Action Buttons */}
      <div className="flex gap-2">
        <Button onClick={handleSubmit} className="flex-1">
          <Plus className="h-4 w-4 mr-2" />
          {isEditing ? 'Update Location' : 'Add Location'}
        </Button>
        {isEditing && (
          <Button onClick={handleCancel} variant="outline">
            Cancel
          </Button>
        )}
      </div>
    </div>
  )
}

// Location Card Component
function LocationCard({ 
  location, 
  onEdit, 
  onDelete 
}: { 
  location: CleanLocation
  onEdit: () => void
  onDelete: () => void 
}) {
  const category = COVERAGE_CATEGORIES.find(cat => cat.value === location.coverage_category)
  const isSpecific = category?.needsMap || false

  return (
    <Card className="w-full">
      <CardHeader className="pb-3">
        <div className="flex items-start justify-between">
          <div className="flex items-center gap-2">
            {isSpecific ? (
              <MapPin className="h-4 w-4 text-blue-600" />
            ) : (
              <Globe className="h-4 w-4 text-green-600" />
            )}
            <CardTitle className="text-base">{location.location_name}</CardTitle>
          </div>
          <div className="flex items-center gap-1">
            <Button variant="ghost" size="sm" onClick={onEdit}>
              <Edit className="h-4 w-4" />
            </Button>
            <Button variant="ghost" size="sm" onClick={onDelete}>
              <Trash2 className="h-4 w-4 text-red-600" />
            </Button>
          </div>
        </div>
      </CardHeader>
      <CardContent className="pt-0">
        <div className="space-y-3">
          {location.description && (
            <p className="text-sm text-gray-600">{location.description}</p>
          )}
          
          <div className="flex flex-wrap gap-2">
            <Badge variant={isSpecific ? 'default' : 'secondary'}>
              {category?.label || location.coverage_category}
            </Badge>
          </div>

          <div className="text-xs text-gray-500 space-y-1">
            {location.latitude && location.longitude && (
              <div className="flex items-center gap-1">
                <MapPin className="h-3 w-3" />
                {location.latitude.toFixed(4)}, {location.longitude.toFixed(4)}
              </div>
            )}
            {location.administrative_region && (
              <div className="flex items-center gap-1">
                <Building className="h-3 w-3" />
                {location.administrative_region}
              </div>
            )}
          </div>
        </div>
      </CardContent>
    </Card>
  )
}

// Main Clean Locations Tab Component
export default function CleanLocationsTab({ locations, onChange }: CleanLocationsTabProps) {
  const [editingLocation, setEditingLocation] = useState<CleanLocation | null>(null)

  const handleAddLocation = (locationData: Omit<CleanLocation, 'id'>) => {
    const newLocation: CleanLocation = {
      ...locationData,
      id: `loc_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
    }
    onChange([...locations, newLocation])
  }

  const handleEditLocation = (locationId: string) => {
    const location = locations.find(loc => loc.id === locationId)
    if (location) {
      setEditingLocation(location)
    }
  }

  const handleUpdateLocation = (updatedLocation: CleanLocation) => {
    onChange(locations.map(loc => 
      loc.id === updatedLocation.id ? updatedLocation : loc
    ))
    setEditingLocation(null)
  }

  const handleCancelEdit = () => {
    setEditingLocation(null)
  }

  const handleDeleteLocation = (locationId: string) => {
    if (confirm('Are you sure you want to delete this location?')) {
      onChange(locations.filter(loc => loc.id !== locationId))
      toast.success('Location deleted')
    }
  }

  const specificLocations = locations.filter(loc => {
    const category = COVERAGE_CATEGORIES.find(cat => cat.value === loc.coverage_category)
    return category?.needsMap
  })

  const broadLocations = locations.filter(loc => {
    const category = COVERAGE_CATEGORIES.find(cat => cat.value === loc.coverage_category)
    return !category?.needsMap
  })

  return (
    <div className="bg-white rounded-lg shadow-sm border p-6 space-y-6 max-h-[80vh] overflow-y-auto">
      <div>
        <h2 className="text-lg font-semibold text-gray-900">Activity Locations</h2>
        <p className="text-sm text-gray-600">
          Add locations where this activity takes place
        </p>
      </div>

      {/* Location Entry Form */}
      <div className="border rounded-lg p-4 bg-gray-50">
        <h3 className="text-base font-medium text-gray-900 mb-4">
          {editingLocation ? 'Edit Location' : 'Add New Location'}
        </h3>
        <LocationForm 
          onAdd={handleAddLocation}
          editingLocation={editingLocation}
          onUpdate={handleUpdateLocation}
          onCancelEdit={handleCancelEdit}
        />
      </div>

      {/* Location Lists */}
      {locations.length > 0 && (
        <div className="space-y-6">
          {/* Specific Locations */}
          {specificLocations.length > 0 && (
            <div className="space-y-4">
              <h3 className="text-base font-medium text-gray-900 flex items-center gap-2">
                <MapPin className="h-4 w-4 text-blue-600" />
                Specific Locations ({specificLocations.length})
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {specificLocations.map((location) => (
                  <LocationCard
                    key={location.id}
                    location={location}
                    onEdit={() => handleEditLocation(location.id)}
                    onDelete={() => handleDeleteLocation(location.id)}
                  />
                ))}
              </div>
            </div>
          )}

          {/* Broad Coverage Areas */}
          {broadLocations.length > 0 && (
            <div className="space-y-4">
              <h3 className="text-base font-medium text-gray-900 flex items-center gap-2">
                <Globe className="h-4 w-4 text-green-600" />
                Coverage Areas ({broadLocations.length})
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {broadLocations.map((location) => (
                  <LocationCard
                    key={location.id}
                    location={location}
                    onEdit={() => handleEditLocation(location.id)}
                    onDelete={() => handleDeleteLocation(location.id)}
                  />
                ))}
              </div>
            </div>
          )}
        </div>
      )}

      {/* Empty State */}
      {locations.length === 0 && (
        <div className="text-center py-8 text-gray-500">
          <MapPin className="h-12 w-12 mx-auto mb-4 text-gray-300" />
          <p className="text-lg font-medium">No locations added yet</p>
          <p className="text-sm">Use the form above to add your first location</p>
        </div>
      )}
    </div>
  )
}