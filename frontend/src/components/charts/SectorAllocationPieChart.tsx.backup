'use client';

import React, { useMemo, useRef, useEffect } from 'react';
import * as d3 from 'd3';
import { getSectorLabel, getSectorDescription } from '@/components/forms/SimpleSectorSelect';
import dacSectorsData from '@/data/dac-sectors.json';

interface SectorAllocation {
  id: string;
  code: string;
  percentage: number;
}

interface TreemapNode {
  name: string;
  value?: number;
  children?: TreemapNode[];
  code?: string;
  category?: string;
  description?: string;
}

interface SectorAllocationPieChartProps {
  allocations: SectorAllocation[];
}

// Financial Times / Economist inspired color palette
const SECTOR_COLORS = [
  '#18375F', // Navy
  '#7A8471', // Olive green
  '#6FA8DC', // Soft grey-blue
  '#C3514E', // Rust red
  '#A6A09B', // Beige
  '#5B4A3A', // Dark brown
  '#8B4F47', // Muted burgundy
  '#4A5D23', // Dark olive
  '#2C5F41', // Forest green
  '#7B6143', // Warm grey
  '#4A5568', // Slate grey
  '#744C4C', // Dusty rose
];

// Create lookup for 3-digit DAC category codes to names
const createCategoryLookup = (): Record<string, string> => {
  const lookup: Record<string, string> = {};
  
  Object.keys(dacSectorsData).forEach(categoryKey => {
    // Extract 3-digit code and name from keys like "111 - Education, Level Unspecified"
    const match = categoryKey.match(/^(\d{3})\s*-\s*(.+)$/);
    if (match) {
      const [, code, name] = match;
      lookup[code] = name;
    }
  });
  
  return lookup;
};

// Squarify treemap tiling algorithm
function squarify(parent: any, x0: number, y0: number, x1: number, y1: number) {
  const nodes = parent.children;
  if (!nodes || nodes.length === 0) return;

  const rows: any[][] = [];
  let row: any[] = [];
  const n = nodes.length;
  let i = 0;

  const dx = x1 - x0;
  const dy = y1 - y0;
  const area = dx * dy;
  const k = area / d3.sum(nodes, (d: any) => d.value);

  // Sort nodes by value descending
  nodes.sort((a: any, b: any) => b.value - a.value);

  function worst(row: any[], w: number): number {
    if (row.length === 0) return Infinity;
    const s = d3.sum(row, (d: any) => d.value) * k;
    const r = Math.max(...row.map((d: any) => d.value * k));
    const l = Math.min(...row.map((d: any) => d.value * k));
    return Math.max((w * w * r) / (s * s), (s * s) / (w * w * l));
  }

  while (i < n) {
    const node = nodes[i];
    const w = dx < dy ? dx : dy;
    
    if (row.length === 0 || worst([...row, node], w) <= worst(row, w)) {
      row.push(node);
    } else {
      rows.push(row);
      row = [node];
    }
    i++;
  }
  if (row.length > 0) rows.push(row);

  // Position rows
  let currentY = y0;
  for (const currentRow of rows) {
    const rowSum = d3.sum(currentRow, (d: any) => d.value) * k;
    const rowHeight = dx < dy ? rowSum / dx : dy;
    const rowWidth = dx < dy ? dx : rowSum / dy;

    if (dx < dy) {
      // Horizontal layout
      let currentX = x0;
      for (const node of currentRow) {
        const nodeWidth = (node.value * k) / rowHeight;
        node.x0 = currentX;
        node.y0 = currentY;
        node.x1 = currentX + nodeWidth;
        node.y1 = currentY + rowHeight;
        currentX += nodeWidth;
      }
      currentY += rowHeight;
    } else {
      // Vertical layout
      let currentX = x0;
      for (const node of currentRow) {
        const nodeWidth = (node.value * k) / rowHeight;
        node.x0 = currentX;
        node.y0 = currentY;
        node.x1 = currentX + rowWidth;
        node.y1 = currentY + nodeWidth;
        currentY += nodeWidth;
      }
      currentX += rowWidth;
    }
  }
}

export default function SectorAllocationPieChart({ 
  allocations = [] 
}: SectorAllocationPieChartProps) {
  const svgRef = useRef<SVGSVGElement>(null);
  
  // Transform allocations into hierarchical data for treemap
  const treemapData = useMemo(() => {
    const categoryLookup = createCategoryLookup();
    
    if (allocations.length === 0) return null;
    
    // Group sectors by category
    const categoryMap = new Map<string, any[]>();
    
    allocations
      .filter(allocation => allocation.percentage > 0)
      .forEach(allocation => {
        const fullLabel = getSectorLabel(allocation.code);
        const description = getSectorDescription(allocation.code);
        
        // Extract category code (first 3 digits) and sector name
        const categoryCode = allocation.code.substring(0, 3);
        const sectorNameMatch = fullLabel.match(/\d{5}\s*-\s*(.+)$/);
        const sectorName = sectorNameMatch ? sectorNameMatch[1] : fullLabel;
        
        const sectorNode = {
          name: sectorName,
          value: allocation.percentage,
          code: allocation.code,
          category: categoryCode,
          description
        };
        
        if (!categoryMap.has(categoryCode)) {
          categoryMap.set(categoryCode, []);
        }
        categoryMap.get(categoryCode)!.push(sectorNode);
      });
    
    // Create hierarchical structure
    const children = Array.from(categoryMap.entries()).map(([categoryCode, sectors]) => {
      const categoryName = categoryLookup[categoryCode] || 'Unknown Category';
      return {
        name: categoryName,
        code: categoryCode,
        children: sectors
      };
    });
    
    return {
      name: 'Sectors',
      children
    };
  }, [allocations]);

  useEffect(() => {
    if (!svgRef.current || !treemapData) return;

    // Clear previous content
    d3.select(svgRef.current).selectAll('*').remove();

    const width = 600;
    const height = 400;
    const margin = { top: 10, right: 10, bottom: 10, left: 10 };
    const innerWidth = width - margin.left - margin.right;
    const innerHeight = height - margin.top - margin.bottom;

    // Create hierarchy and calculate values
    const root = d3.hierarchy(treemapData)
      .sum((d: any) => d.value || 0)
      .sort((a, b) => (b.value || 0) - (a.value || 0));

    // Create treemap layout
    const treemap = d3.treemap<any>()
      .tile(squarify as any)
      .size([innerWidth, innerHeight])
      .padding(2)
      .round(true);

    treemap(root);

    const svg = d3.select(svgRef.current)
      .attr('width', width)
      .attr('height', height);

    const g = svg.append('g')
      .attr('transform', `translate(${margin.left},${margin.top})`);

    // Create tooltip
    const tooltip = d3.select('body').append('div')
      .attr('class', 'absolute invisible bg-gray-900 text-white text-xs rounded px-3 py-2 pointer-events-none z-50')
      .style('opacity', 0);

    // Color scale
    const colorScale = d3.scaleOrdinal(SECTOR_COLORS);

    // Draw leaf nodes (sectors)
    const leaf = g.selectAll('.leaf')
      .data(root.leaves())
      .enter().append('g')
      .attr('class', 'leaf')
      .attr('transform', (d: any) => `translate(${d.x0},${d.y0})`);

    leaf.append('rect')
      .attr('width', (d: any) => Math.max(0, d.x1 - d.x0))
      .attr('height', (d: any) => Math.max(0, d.y1 - d.y0))
             .attr('fill', (d: any) => {
         const categoryIndex = root.children?.findIndex((cat: any) => cat.data.code === d.data.category) || 0;
         return colorScale(categoryIndex.toString());
       })
      .attr('stroke', '#fff')
      .attr('stroke-width', 1)
      .on('mouseover', function(event, d: any) {
        d3.select(this).attr('opacity', 0.8);
        tooltip.transition().duration(200).style('opacity', 1);
        tooltip.html(`
          <div class="font-semibold">${d.data.code} - ${d.data.name}</div>
          <div class="text-xs opacity-75">Category: ${d.parent?.data.name}</div>
          <div>Allocation: ${d.data.value.toFixed(1)}%</div>
        `)
          .style('left', `${event.pageX + 10}px`)
          .style('top', `${event.pageY - 10}px`)
          .classed('invisible', false);
      })
      .on('mouseout', function() {
        d3.select(this).attr('opacity', 1);
        tooltip.transition().duration(200).style('opacity', 0)
          .on('end', () => tooltip.classed('invisible', true));
      });

    // Add text labels for larger rectangles
    leaf.append('text')
      .attr('x', 4)
      .attr('y', 16)
      .text((d: any) => {
        const width = d.x1 - d.x0;
        const height = d.y1 - d.y0;
        if (width > 80 && height > 30) {
          return d.data.code;
        }
        return '';
      })
      .attr('font-size', '10px')
      .attr('font-weight', 'bold')
      .attr('fill', 'white')
      .attr('text-anchor', 'start');

    // Add percentage labels for larger rectangles
    leaf.append('text')
      .attr('x', 4)
      .attr('y', 28)
      .text((d: any) => {
        const width = d.x1 - d.x0;
        const height = d.y1 - d.y0;
        if (width > 80 && height > 40) {
          return `${d.data.value.toFixed(1)}%`;
        }
        return '';
      })
      .attr('font-size', '9px')
      .attr('fill', 'white')
      .attr('text-anchor', 'start');

    // Draw category boundaries (optional)
    const categoryGroups = g.selectAll('.category')
      .data(root.children || [])
      .enter().append('g')
      .attr('class', 'category');

    categoryGroups.append('rect')
      .attr('x', (d: any) => d.x0)
      .attr('y', (d: any) => d.y0)
      .attr('width', (d: any) => d.x1 - d.x0)
      .attr('height', (d: any) => d.y1 - d.y0)
      .attr('fill', 'none')
      .attr('stroke', '#333')
      .attr('stroke-width', 2)
      .attr('stroke-dasharray', '5,5');

    // Category labels
    categoryGroups.append('text')
      .attr('x', (d: any) => d.x0 + 4)
      .attr('y', (d: any) => d.y0 + 14)
      .text((d: any) => {
        const width = d.x1 - d.x0;
        const height = d.y1 - d.y0;
        if (width > 100 && height > 50) {
          return d.data.name.length > 20 ? d.data.name.substring(0, 20) + '...' : d.data.name;
        }
        return '';
      })
      .attr('font-size', '11px')
      .attr('font-weight', 'bold')
      .attr('fill', '#333')
      .attr('text-anchor', 'start');

    // Cleanup tooltip on unmount
    return () => {
      tooltip.remove();
    };
  }, [treemapData]);

  if (!treemapData || allocations.length === 0) {
    return (
      <div className="h-64 flex items-center justify-center text-gray-500 bg-gray-50 rounded-lg border-2 border-dashed border-gray-200">
        <div className="text-center">
          <div className="text-sm font-medium mb-1">No Sector Data</div>
          <div className="text-xs">Add sectors with percentages to see the visualization</div>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-4">
      {/* Chart Title */}
      <div className="text-center">
        <h4 className="text-base font-semibold text-gray-900">Sector Allocation Breakdown</h4>
        <p className="text-xs text-gray-600 mt-1">
          Treemap visualization of OECD DAC sector percentages
        </p>
      </div>

      {/* Chart Container */}
      <div className="bg-white rounded-lg border p-4 flex justify-center">
        <svg ref={svgRef}></svg>
      </div>
    </div>
  );
}