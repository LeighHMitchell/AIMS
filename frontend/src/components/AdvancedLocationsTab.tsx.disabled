"use client"

import React, { useState, useEffect, useRef } from "react"
import { MapContainer, TileLayer, Marker, Popup, useMapEvents, useMap } from "react-leaflet"
import L from "leaflet"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue, SelectGroup, SelectLabel } from "@/components/ui/select"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { MapPin, Edit, Trash2, Plus, Search, X, Loader2, Globe, Navigation } from "lucide-react"
import { toast } from "sonner"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"

// Fix for default markers in react-leaflet
delete (L.Icon.Default.prototype as any)._getIconUrl
L.Icon.Default.mergeOptions({
  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-icon-2x.png',
  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-icon.png',
  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-shadow.png',
})

export interface AdvancedLocation {
  id: string
  location_type: 'specific' | 'broad'
  
  // Common fields
  location_name: string
  description: string
  admin_level_1?: string // Province/State
  admin_level_2?: string // District/Township
  
  // Specific location fields
  latitude?: number
  longitude?: number
  location_category?: string
  
  // Broad coverage fields
  coverage_category?: string
  region_name?: string
  admin_level?: string
}

interface AdvancedLocationsTabProps {
  locations: AdvancedLocation[]
  onChange: (locations: AdvancedLocation[]) => void
}

interface NominatimResult {
  place_id: number
  display_name: string
  lat: string
  lon: string
  address?: {
    country?: string
    state?: string
    county?: string
    city?: string
    town?: string
    village?: string
    suburb?: string
    neighbourhood?: string
  }
}

// Location Categories for Specific Locations
const LOCATION_CATEGORIES = {
  offices: {
    label: "üè¢ Offices",
    options: [
      { value: "project_office", label: "Project Coordination Office" },
      { value: "field_office", label: "Field Implementation Office" },
      { value: "partner_office", label: "Partner Organisation Office" }
    ]
  },
  service_sites: {
    label: "üßë‚Äçü§ù‚Äçüßë Service Sites",
    options: [
      { value: "training_site", label: "Training or Learning Facility" },
      { value: "school_site", label: "School or Educational Institution" },
      { value: "health_site", label: "Health Facility" },
      { value: "community_site", label: "Community or Target Area" }
    ]
  },
  infrastructure: {
    label: "üèóÔ∏è Infrastructure & Delivery",
    options: [
      { value: "construction_site", label: "Construction or Work Site" },
      { value: "distribution_site", label: "Distribution or Service Point" }
    ]
  },
  events: {
    label: "ü§ù Events & Meetings",
    options: [
      { value: "event_site", label: "Consultation or Meeting Venue" }
    ]
  },
  other: {
    label: "‚ùì Other",
    options: [
      { value: "other", label: "Other (please specify)" }
    ]
  }
}

// Coverage Categories for Broad Areas
const COVERAGE_CATEGORIES = [
  { value: "city_wide", label: "City-Wide Activity" },
  { value: "provincial", label: "Provincial/State-Wide" },
  { value: "multi_region", label: "Multi-Regional" },
  { value: "national", label: "National Activity" },
  { value: "cross_border", label: "Regional Cross-Border" }
]

// Administrative Levels
const ADMIN_LEVELS = [
  { value: "country", label: "Country" },
  { value: "region", label: "Region" },
  { value: "district", label: "District" }
]

// Map component that updates when coordinates change
function MapUpdater({ center, zoom }: { center: [number, number], zoom: number }) {
  const map = useMap()
  
  useEffect(() => {
    if (center[0] !== 0 || center[1] !== 0) {
      map.setView(center, zoom)
    }
  }, [center, zoom, map])
  
  return null
}

// Custom hook for map click events
function MapClickHandler({ onMapClick }: { onMapClick: (latlng: L.LatLng) => void }) {
  useMapEvents({
    click: (e) => {
      onMapClick(e.latlng)
    }
  })
  return null
}

// Enhanced location search component with geocoding
function LocationSearch({ 
  onLocationSelect, 
  initialValue = "" 
}: { 
  onLocationSelect: (location: { lat: number, lng: number, name: string, address?: any }) => void
  initialValue?: string
}) {
  const [searchQuery, setSearchQuery] = useState(initialValue)
  const [searchResults, setSearchResults] = useState<NominatimResult[]>([])
  const [isSearching, setIsSearching] = useState(false)
  const [showResults, setShowResults] = useState(false)
  const searchTimeout = useRef<NodeJS.Timeout>()

  const searchLocations = async (query: string) => {
    if (!query.trim()) {
      setSearchResults([])
      setShowResults(false)
      return
    }

    setIsSearching(true)
    try {
      const response = await fetch(
        `https://nominatim.openstreetmap.org/search?` +
        `format=json&q=${encodeURIComponent(query)}&limit=5&addressdetails=1&` +
        `accept-language=en&countrycodes=&dedupe=1`,
        { 
          headers: { 
            'User-Agent': 'AIMS-Activity-Editor/1.0',
            'Accept': 'application/json'
          } 
        }
      )
      
      if (!response.ok) {
        throw new Error('Search service unavailable')
      }
      
      const results = await response.json()
      setSearchResults(results)
      setShowResults(results.length > 0)
    } catch (error) {
      console.error('Search error:', error)
      toast.error('Failed to search locations. Please try again.')
      setSearchResults([])
      setShowResults(false)
    } finally {
      setIsSearching(false)
    }
  }

  const handleSearchChange = (value: string) => {
    setSearchQuery(value)
    
    if (searchTimeout.current) {
      clearTimeout(searchTimeout.current)
    }
    
    if (value.trim()) {
      searchTimeout.current = setTimeout(() => {
        searchLocations(value)
      }, 600)
    } else {
      setSearchResults([])
      setShowResults(false)
    }
  }

  const handleResultSelect = (result: NominatimResult) => {
    const lat = parseFloat(result.lat)
    const lng = parseFloat(result.lon)
    
    if (isNaN(lat) || isNaN(lng)) {
      toast.error('Invalid coordinates from search result')
      return
    }
    
    onLocationSelect({
      lat,
      lng,
      name: result.display_name,
      address: result.address
    })
    
    setSearchQuery(result.display_name)
    setSearchResults([])
    setShowResults(false)
    toast.success('Location found and pin placed')
  }

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    if (searchQuery.trim()) {
      searchLocations(searchQuery)
    }
  }

  return (
    <div className="relative">
      <form onSubmit={handleSubmit} className="flex gap-2">
        <div className="relative flex-1">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
          <Input
            placeholder="Enter address (e.g., '4 Lake Road, Blackburn, VIC 3130, Australia')"
            value={searchQuery}
            onChange={(e) => handleSearchChange(e.target.value)}
            className="pl-10 pr-10"
          />
          {isSearching && (
            <Loader2 className="absolute right-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-blue-500 animate-spin" />
          )}
          {searchQuery && !isSearching && (
            <button
              type="button"
              onClick={() => {
                setSearchQuery("")
                setSearchResults([])
                setShowResults(false)
              }}
              className="absolute right-3 top-1/2 transform -translate-y-1/2"
            >
              <X className="h-4 w-4 text-gray-400 hover:text-gray-600" />
            </button>
          )}
        </div>
        <Button type="submit" variant="outline" disabled={isSearching || !searchQuery.trim()}>
          Search
        </Button>
      </form>

      {showResults && searchResults.length > 0 && (
        <div className="absolute z-50 w-full mt-1 bg-white border border-gray-200 rounded-md shadow-lg max-h-60 overflow-y-auto">
          {searchResults.map((result) => (
            <button
              key={result.place_id}
              onClick={() => handleResultSelect(result)}
              className="w-full text-left px-4 py-3 hover:bg-gray-50 border-b border-gray-100 last:border-b-0 focus:outline-none focus:bg-blue-50"
            >
              <div className="text-sm font-medium truncate">{result.display_name}</div>
              <div className="text-xs text-gray-500 mt-1">
                üìç {parseFloat(result.lat).toFixed(4)}, {parseFloat(result.lon).toFixed(4)}
              </div>
            </button>
          ))}
        </div>
      )}
      
      {showResults && searchResults.length === 0 && !isSearching && searchQuery.trim() && (
        <div className="absolute z-50 w-full mt-1 bg-white border border-gray-200 rounded-md shadow-lg">
          <div className="px-4 py-3 text-sm text-gray-500">
            No locations found. Try a different search term.
          </div>
        </div>
      )}
    </div>
  )
}

// Location Type Selector Component
function LocationTypeSelector({ 
  value, 
  onChange 
}: { 
  value: 'specific' | 'broad'
  onChange: (value: 'specific' | 'broad') => void 
}) {
  return (
    <div className="space-y-4">
      <Label className="text-base font-medium">What kind of location are you reporting?</Label>
      <RadioGroup value={value} onValueChange={(val) => onChange(val as 'specific' | 'broad')} className="flex flex-col space-y-3">
        <div className="flex items-center space-x-2">
          <RadioGroupItem value="specific" id="specific" />
          <Label htmlFor="specific" className="flex items-center gap-2 cursor-pointer">
            <MapPin className="h-4 w-4 text-blue-600" />
            <span className="font-medium">Specific Location</span>
            <span className="text-sm text-gray-500">(Pin a site on the map)</span>
          </Label>
        </div>
        <div className="flex items-center space-x-2">
          <RadioGroupItem value="broad" id="broad" />
          <Label htmlFor="broad" className="flex items-center gap-2 cursor-pointer">
            <Globe className="h-4 w-4 text-green-600" />
            <span className="font-medium">Broader Area or Region</span>
            <span className="text-sm text-gray-500">(City-wide, regional, or national activity)</span>
          </Label>
        </div>
      </RadioGroup>
    </div>
  )
}

// Specific Location Form Component
function SpecificLocationForm({ 
  onAdd 
}: { 
  onAdd: (location: Omit<AdvancedLocation, 'id'>) => void 
}) {
  const [formData, setFormData] = useState({
    location_name: '',
    description: '',
    latitude: 19.5, // Default to Myanmar center
    longitude: 96.5,
    location_category: '',
    admin_level_1: '',
    admin_level_2: ''
  })

  const [mapKey, setMapKey] = useState(0)

  const handleLocationSelect = (searchLocation: { lat: number, lng: number, name: string, address?: any }) => {
    setFormData(prev => ({
      ...prev,
      latitude: searchLocation.lat,
      longitude: searchLocation.lng,
      location_name: prev.location_name || searchLocation.name.split(',')[0].trim(),
      admin_level_1: searchLocation.address?.state || searchLocation.address?.country || prev.admin_level_1,
      admin_level_2: searchLocation.address?.county || searchLocation.address?.city || 
                     searchLocation.address?.town || searchLocation.address?.suburb || prev.admin_level_2
    }))
    setMapKey(prev => prev + 1)
  }

  const handleCoordinateChange = (field: 'latitude' | 'longitude', value: string) => {
    const numValue = parseFloat(value)
    if (!isNaN(numValue)) {
      setFormData(prev => ({ ...prev, [field]: numValue }))
      setMapKey(prev => prev + 1)
    }
  }

  const handleAdd = () => {
    if (!formData.location_name.trim()) {
      toast.error('Location name is required')
      return
    }
    
    if (!formData.location_category) {
      toast.error('Please select a location category')
      return
    }
    
    if (formData.latitude === 0 && formData.longitude === 0) {
      toast.error('Please set coordinates by clicking on the map or using search')
      return
    }

    onAdd({
      location_type: 'specific',
      location_name: formData.location_name,
      description: formData.description,
      latitude: formData.latitude,
      longitude: formData.longitude,
      location_category: formData.location_category,
      admin_level_1: formData.admin_level_1,
      admin_level_2: formData.admin_level_2
    })

    // Reset form
    setFormData({
      location_name: '',
      description: '',
      latitude: 19.5,
      longitude: 96.5,
      location_category: '',
      admin_level_1: '',
      admin_level_2: ''
    })
    setMapKey(prev => prev + 1)
    toast.success('Location added successfully!')
  }

  const getCategoryLabel = (value: string) => {
    for (const group of Object.values(LOCATION_CATEGORIES)) {
      const option = group.options.find(opt => opt.value === value)
      if (option) return option.label
    }
    return value
  }

  return (
    <div className="space-y-6">
      {/* Address Search */}
      <div className="space-y-2">
        <Label className="text-sm font-medium">Search for Location (Optional)</Label>
        <LocationSearch onLocationSelect={handleLocationSelect} />
        <p className="text-xs text-gray-500">
          Enter an address to automatically find and place a pin
        </p>
      </div>

      {/* Interactive Map */}
      <div className="space-y-2">
        <Label className="text-sm font-medium">Location on Map</Label>
        <div className="relative w-full h-64 overflow-hidden rounded border border-gray-300 bg-gray-100">
          <MapContainer
            key={mapKey}
            center={[formData.latitude, formData.longitude]}
            zoom={formData.latitude !== 19.5 || formData.longitude !== 96.5 ? 12 : 6}
            style={{ height: '100%', width: '100%', zIndex: 0 }}
            scrollWheelZoom={true}
            doubleClickZoom={true}
            zoomControl={true}
            whenReady={() => {
              // Map is ready - can add additional setup here if needed
            }}
          >
            <TileLayer
              url="https://maps.wikimedia.org/osm-intl/{z}/{x}/{y}.png"
              attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors | Wikimedia'
              maxZoom={18}
            />
            <MapUpdater 
              center={[formData.latitude, formData.longitude]} 
              zoom={formData.latitude !== 19.5 || formData.longitude !== 96.5 ? 12 : 6}
            />
            <MapClickHandler 
              onMapClick={(latlng) => {
                setFormData(prev => ({
                  ...prev,
                  latitude: latlng.lat,
                  longitude: latlng.lng
                }))
              }}
            />
            <Marker position={[formData.latitude, formData.longitude]}>
              <Popup>
                <div className="text-sm">
                  <div className="font-medium">{formData.location_name || 'New Location'}</div>
                  <div className="text-xs text-gray-600 mt-1">
                    {formData.latitude.toFixed(4)}, {formData.longitude.toFixed(4)}
                  </div>
                </div>
              </Popup>
            </Marker>
          </MapContainer>
        </div>
        <p className="text-xs text-gray-500">Click anywhere on the map to place or move the pin</p>
      </div>

      {/* Coordinates */}
      <div className="grid grid-cols-2 gap-4">
        <div className="space-y-2">
          <Label htmlFor="latitude" className="text-sm font-medium">Latitude</Label>
          <Input
            id="latitude"
            type="number"
            step="any"
            value={formData.latitude}
            onChange={(e) => handleCoordinateChange('latitude', e.target.value)}
            placeholder="0.000000"
            className="font-mono text-sm"
          />
        </div>
        <div className="space-y-2">
          <Label htmlFor="longitude" className="text-sm font-medium">Longitude</Label>
          <Input
            id="longitude"
            type="number"
            step="any"
            value={formData.longitude}
            onChange={(e) => handleCoordinateChange('longitude', e.target.value)}
            placeholder="0.000000"
            className="font-mono text-sm"
          />
        </div>
      </div>

      {/* Metadata Fields */}
      <div className="grid grid-cols-2 gap-4">
        <div className="space-y-2">
          <Label htmlFor="location_name" className="text-sm font-medium">
            Location Name <span className="text-red-500">*</span>
          </Label>
          <Input
            id="location_name"
            value={formData.location_name}
            onChange={(e) => setFormData(prev => ({ ...prev, location_name: e.target.value }))}
            placeholder="e.g., Health Clinic, Lashio"
            required
          />
        </div>
        <div className="space-y-2">
          <Label htmlFor="location_category" className="text-sm font-medium">
            Location Category <span className="text-red-500">*</span>
          </Label>
          <Select value={formData.location_category} onValueChange={(value) => setFormData(prev => ({ ...prev, location_category: value }))}>
            <SelectTrigger id="location_category">
              <SelectValue placeholder="Select a category" />
            </SelectTrigger>
            <SelectContent>
              {Object.entries(LOCATION_CATEGORIES).map(([groupKey, group]) => (
                <SelectGroup key={groupKey}>
                  <SelectLabel>{group.label}</SelectLabel>
                  {group.options.map((option) => (
                    <SelectItem key={option.value} value={option.value}>
                      {option.label}
                    </SelectItem>
                  ))}
                </SelectGroup>
              ))}
            </SelectContent>
          </Select>
        </div>
      </div>

      {/* Description */}
      <div className="space-y-2">
        <Label htmlFor="description" className="text-sm font-medium">Description</Label>
        <Textarea
          id="description"
          value={formData.description}
          onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
          placeholder="Describe what happens at this location"
          rows={3}
          className="resize-none"
        />
      </div>

      {/* Administrative Areas */}
      <div className="grid grid-cols-2 gap-4">
        <div className="space-y-2">
          <Label htmlFor="admin_level_1" className="text-sm font-medium">Province/State</Label>
          <Input
            id="admin_level_1"
            value={formData.admin_level_1}
            onChange={(e) => setFormData(prev => ({ ...prev, admin_level_1: e.target.value }))}
            placeholder="e.g., Shan State, Victoria"
          />
        </div>
        <div className="space-y-2">
          <Label htmlFor="admin_level_2" className="text-sm font-medium">District/Township</Label>
          <Input
            id="admin_level_2"
            value={formData.admin_level_2}
            onChange={(e) => setFormData(prev => ({ ...prev, admin_level_2: e.target.value }))}
            placeholder="e.g., Lashio Township, Blackburn"
          />
        </div>
      </div>

      {/* Add Button */}
      <Button onClick={handleAdd} className="w-full">
        <Plus className="h-4 w-4 mr-2" />
        Confirm Location
      </Button>
    </div>
  )
}

// Broad Coverage Form Component
function BroadCoverageForm({ 
  onAdd 
}: { 
  onAdd: (location: Omit<AdvancedLocation, 'id'>) => void 
}) {
  const [formData, setFormData] = useState({
    location_name: '',
    coverage_category: '',
    region_name: '',
    admin_level: '',
    description: '',
    admin_level_1: '',
    admin_level_2: ''
  })

  const handleAdd = () => {
    if (!formData.location_name.trim()) {
      toast.error('Location name is required')
      return
    }
    
    if (!formData.coverage_category) {
      toast.error('Please select a coverage category')
      return
    }

    if (!formData.region_name.trim()) {
      toast.error('Region/Area name is required')
      return
    }

    onAdd({
      location_type: 'broad',
      location_name: formData.location_name,
      coverage_category: formData.coverage_category,
      region_name: formData.region_name,
      admin_level: formData.admin_level,
      description: formData.description,
      admin_level_1: formData.admin_level_1,
      admin_level_2: formData.admin_level_2
    })

    // Reset form
    setFormData({
      location_name: '',
      coverage_category: '',
      region_name: '',
      admin_level: '',
      description: '',
      admin_level_1: '',
      admin_level_2: ''
    })
    toast.success('Coverage area added successfully!')
  }

  const getCoverageLabel = (value: string) => {
    const category = COVERAGE_CATEGORIES.find(cat => cat.value === value)
    return category?.label || value
  }

  return (
    <div className="space-y-6">
      {/* Basic Information */}
      <div className="grid grid-cols-2 gap-4">
        <div className="space-y-2">
          <Label htmlFor="location_name" className="text-sm font-medium">
            Location Name <span className="text-red-500">*</span>
          </Label>
          <Input
            id="location_name"
            value={formData.location_name}
            onChange={(e) => setFormData(prev => ({ ...prev, location_name: e.target.value }))}
            placeholder="e.g., Mandalay Region Health Program"
            required
          />
        </div>
        <div className="space-y-2">
          <Label htmlFor="coverage_category" className="text-sm font-medium">
            Coverage Category <span className="text-red-500">*</span>
          </Label>
          <Select value={formData.coverage_category} onValueChange={(value) => setFormData(prev => ({ ...prev, coverage_category: value }))}>
            <SelectTrigger id="coverage_category">
              <SelectValue placeholder="Select coverage type" />
            </SelectTrigger>
            <SelectContent>
              {COVERAGE_CATEGORIES.map((category) => (
                <SelectItem key={category.value} value={category.value}>
                  {category.label}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
      </div>

      {/* Region Details */}
      <div className="grid grid-cols-2 gap-4">
        <div className="space-y-2">
          <Label htmlFor="region_name" className="text-sm font-medium">
            Region/Area Name <span className="text-red-500">*</span>
          </Label>
          <Input
            id="region_name"
            value={formData.region_name}
            onChange={(e) => setFormData(prev => ({ ...prev, region_name: e.target.value }))}
            placeholder="e.g., Mandalay Region, Northern Thailand"
            required
          />
        </div>
        <div className="space-y-2">
          <Label htmlFor="admin_level" className="text-sm font-medium">Administrative Level</Label>
          <Select value={formData.admin_level} onValueChange={(value) => setFormData(prev => ({ ...prev, admin_level: value }))}>
            <SelectTrigger id="admin_level">
              <SelectValue placeholder="Select level" />
            </SelectTrigger>
            <SelectContent>
              {ADMIN_LEVELS.map((level) => (
                <SelectItem key={level.value} value={level.value}>
                  {level.label}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
      </div>

      {/* Description */}
      <div className="space-y-2">
        <Label htmlFor="description" className="text-sm font-medium">Description</Label>
        <Textarea
          id="description"
          value={formData.description}
          onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
          placeholder="Describe the scope and nature of activities in this region"
          rows={3}
          className="resize-none"
        />
      </div>

      {/* Administrative Areas (Optional for broad coverage) */}
      <div className="grid grid-cols-2 gap-4">
        <div className="space-y-2">
          <Label htmlFor="admin_level_1" className="text-sm font-medium">Primary Region/State</Label>
          <Input
            id="admin_level_1"
            value={formData.admin_level_1}
            onChange={(e) => setFormData(prev => ({ ...prev, admin_level_1: e.target.value }))}
            placeholder="e.g., Mandalay Region"
          />
        </div>
        <div className="space-y-2">
          <Label htmlFor="admin_level_2" className="text-sm font-medium">Secondary Region</Label>
          <Input
            id="admin_level_2"
            value={formData.admin_level_2}
            onChange={(e) => setFormData(prev => ({ ...prev, admin_level_2: e.target.value }))}
            placeholder="e.g., Multiple townships"
          />
        </div>
      </div>

      {/* Add Button */}
      <Button onClick={handleAdd} className="w-full">
        <Globe className="h-4 w-4 mr-2" />
        Confirm Coverage Area
      </Button>
    </div>
  )
}

// Location Card Component
function LocationCard({ 
  location, 
  onEdit, 
  onDelete 
}: { 
  location: AdvancedLocation
  onEdit: () => void
  onDelete: () => void 
}) {
  const getCategoryLabel = (value: string) => {
    if (location.location_type === 'specific') {
      for (const group of Object.values(LOCATION_CATEGORIES)) {
        const option = group.options.find(opt => opt.value === value)
        if (option) return option.label
      }
    } else {
      const category = COVERAGE_CATEGORIES.find(cat => cat.value === value)
      if (category) return category.label
    }
    return value
  }

  return (
    <Card className="w-full">
      <CardHeader className="pb-3">
        <div className="flex items-start justify-between">
          <div className="flex items-center gap-2">
            {location.location_type === 'specific' ? (
              <MapPin className="h-4 w-4 text-blue-600" />
            ) : (
              <Globe className="h-4 w-4 text-green-600" />
            )}
            <CardTitle className="text-base">{location.location_name}</CardTitle>
          </div>
          <div className="flex items-center gap-1">
            <Button variant="ghost" size="sm" onClick={onEdit}>
              <Edit className="h-4 w-4" />
            </Button>
            <Button variant="ghost" size="sm" onClick={onDelete}>
              <Trash2 className="h-4 w-4 text-red-600" />
            </Button>
          </div>
        </div>
      </CardHeader>
      <CardContent className="pt-0">
        <div className="space-y-3">
          {location.description && (
            <p className="text-sm text-gray-600">{location.description}</p>
          )}
          
          <div className="flex flex-wrap gap-2">
            <Badge variant={location.location_type === 'specific' ? 'default' : 'secondary'}>
              {location.location_type === 'specific' ? (
                getCategoryLabel(location.location_category || '')
              ) : (
                getCategoryLabel(location.coverage_category || '')
              )}
            </Badge>
            <Badge variant="outline">
              {location.location_type === 'specific' ? 'Pin Location' : 'Coverage Area'}
            </Badge>
          </div>

          <div className="text-xs text-gray-500 space-y-1">
            {location.location_type === 'specific' && location.latitude && location.longitude && (
              <div>üìç {location.latitude.toFixed(4)}, {location.longitude.toFixed(4)}</div>
            )}
            {location.location_type === 'broad' && location.region_name && (
              <div>üåç {location.region_name}</div>
            )}
            {(location.admin_level_1 || location.admin_level_2) && (
              <div>üè¢ {[location.admin_level_2, location.admin_level_1].filter(Boolean).join(', ')}</div>
            )}
          </div>
        </div>
      </CardContent>
    </Card>
  )
}

// Main Advanced Locations Tab Component
export default function AdvancedLocationsTab({ locations, onChange }: AdvancedLocationsTabProps) {
  const [locationType, setLocationType] = useState<'specific' | 'broad'>('specific')

  const handleAddLocation = (locationData: Omit<AdvancedLocation, 'id'>) => {
    const newLocation: AdvancedLocation = {
      ...locationData,
      id: `loc_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
    }
    onChange([...locations, newLocation])
  }

  const handleEditLocation = (locationId: string) => {
    // For now, just show a toast. In a full implementation, this would open an edit form
    toast.info('Edit functionality coming soon!')
  }

  const handleDeleteLocation = (locationId: string) => {
    if (confirm('Are you sure you want to delete this location?')) {
      onChange(locations.filter(loc => loc.id !== locationId))
      toast.success('Location deleted')
    }
  }

  const specificLocations = locations.filter(loc => loc.location_type === 'specific')
  const broadLocations = locations.filter(loc => loc.location_type === 'broad')

  return (
    <div className="bg-white rounded-lg shadow-sm border p-8 space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-lg font-semibold text-gray-900">Activity Locations</h2>
          <p className="text-sm text-gray-600">
            Report specific sites or broader geographic coverage for this activity
          </p>
        </div>
      </div>

      {/* Location Type Selector */}
      <LocationTypeSelector value={locationType} onChange={setLocationType} />

      {/* Dynamic Form based on Location Type */}
      <div className="border-t pt-6">
        {locationType === 'specific' ? (
          <SpecificLocationForm onAdd={handleAddLocation} />
        ) : (
          <BroadCoverageForm onAdd={handleAddLocation} />
        )}
      </div>

      {/* Location Lists */}
      {locations.length > 0 && (
        <div className="border-t pt-6 space-y-6">
          {/* Specific Locations */}
          {specificLocations.length > 0 && (
            <div className="space-y-4">
              <h3 className="text-base font-medium text-gray-900 flex items-center gap-2">
                <MapPin className="h-4 w-4 text-blue-600" />
                Specific Locations ({specificLocations.length})
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {specificLocations.map((location) => (
                  <LocationCard
                    key={location.id}
                    location={location}
                    onEdit={() => handleEditLocation(location.id)}
                    onDelete={() => handleDeleteLocation(location.id)}
                  />
                ))}
              </div>
            </div>
          )}

          {/* Broad Coverage Areas */}
          {broadLocations.length > 0 && (
            <div className="space-y-4">
              <h3 className="text-base font-medium text-gray-900 flex items-center gap-2">
                <Globe className="h-4 w-4 text-green-600" />
                Coverage Areas ({broadLocations.length})
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {broadLocations.map((location) => (
                  <LocationCard
                    key={location.id}
                    location={location}
                    onEdit={() => handleEditLocation(location.id)}
                    onDelete={() => handleDeleteLocation(location.id)}
                  />
                ))}
              </div>
            </div>
          )}
        </div>
      )}

      {/* Empty State */}
      {locations.length === 0 && (
        <div className="text-center py-12 text-gray-500 border-t">
          {locationType === 'specific' ? (
            <>
              <MapPin className="h-12 w-12 mx-auto mb-4 text-gray-300" />
              <p className="text-lg font-medium">No specific locations added yet</p>
              <p className="text-sm">Use the map above to pin a location or search for an address</p>
            </>
          ) : (
            <>
              <Globe className="h-12 w-12 mx-auto mb-4 text-gray-300" />
              <p className="text-lg font-medium">No coverage areas defined yet</p>
              <p className="text-sm">Fill out the form above to define a broader coverage area</p>
            </>
          )}
        </div>
      )}
    </div>
  )
}