"use client";

import React, { useState, useEffect } from 'react';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { Input } from '@/components/ui/input';
import { OrganizationCombobox } from '@/components/ui/organization-combobox';
import { EnhancedSearchableSelect } from '@/components/ui/enhanced-searchable-select';
import { HelpTextTooltip } from '@/components/ui/help-text-tooltip';
import { useOrganizations } from '@/hooks/use-organizations';
import { IATI_ORGANIZATION_ROLES } from '@/data/iati-organization-roles';
import { getOrganizationRoleName } from '@/data/iati-organization-roles';
import { Plus, Save, ChevronDown, ChevronUp } from 'lucide-react';
import { toast } from 'sonner';

interface ParticipatingOrgModalProps {
  open: boolean;
  onClose: () => void;
  onSave: (data: ParticipatingOrgData) => Promise<void>;
  editingOrg?: ParticipatingOrgData | null;
  activityId: string;
}

export interface ParticipatingOrgData {
  id?: string;
  organization_id: string;
  role_type: 'funding' | 'extending' | 'implementing' | 'government';
  iati_role_code: number;
  iati_org_ref?: string;
  org_type?: string;
  activity_id_ref?: string;
  crs_channel_code?: string;
  narrative?: string;
  narrative_lang?: string;
}

export function ParticipatingOrgModal({ 
  open, 
  onClose, 
  onSave, 
  editingOrg,
  activityId 
}: ParticipatingOrgModalProps) {
  const { organizations, loading: orgsLoading } = useOrganizations();
  const [saving, setSaving] = useState(false);
  const [showAdvanced, setShowAdvanced] = useState(false);
  
  // Form state
  const [formData, setFormData] = useState<Partial<ParticipatingOrgData>>({
    organization_id: '',
    role_type: 'implementing',
    iati_role_code: 4,
    narrative_lang: 'en'
  });

  // Load editing data
  useEffect(() => {
    if (editingOrg) {
      setFormData(editingOrg);
      // Show advanced if any advanced fields are filled
      if (editingOrg.activity_id_ref || editingOrg.crs_channel_code) {
        setShowAdvanced(true);
      }
    } else {
      // Reset for new entry
      setFormData({
        organization_id: '',
        role_type: 'implementing',
        iati_role_code: 4,
        narrative_lang: 'en'
      });
      setShowAdvanced(false);
    }
  }, [editingOrg, open]);

  // Auto-populate IATI ref, type, and narrative when organization is selected
  // This preserves backend data even though we don't show these fields
  useEffect(() => {
    if (formData.organization_id && !editingOrg) {
      const selectedOrg = organizations.find(o => o.id === formData.organization_id);
      if (selectedOrg) {
        setFormData(prev => ({
          ...prev,
          iati_org_ref: selectedOrg.iati_org_id || prev.iati_org_ref,
          org_type: selectedOrg.organisation_type || prev.org_type,
          narrative: selectedOrg.name
        }));
      }
    }
  }, [formData.organization_id, organizations, editingOrg]);

  // Map role to IATI code
  const roleToIATICode: Record<string, number> = {
    'funding': 1,
    'government': 2,
    'extending': 3,
    'implementing': 4
  };

  const handleRoleChange = (role: string) => {
    // Extract the role type from the format "4 Implementing" -> "implementing"
    const roleType = role.split(' ')[1]?.toLowerCase() || role.toLowerCase();
    setFormData(prev => ({
      ...prev,
      role_type: roleType as any,
      iati_role_code: roleToIATICode[roleType as keyof typeof roleToIATICode]
    }));
  };

  const handleSubmit = async () => {
    if (!formData.organization_id || !formData.role_type) {
      toast.error('Please select an organization and role');
      return;
    }

    setSaving(true);
    try {
      await onSave(formData as ParticipatingOrgData);
      onClose();
    } catch (error) {
      console.error('Error saving participating organization:', error);
      toast.error('Failed to save organization');
    } finally {
      setSaving(false);
    }
  };

  return (
    <Dialog open={open} onOpenChange={onClose}>
      <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>
            {editingOrg ? 'Edit Participating Organization' : 'Add Participating Organization'}
          </DialogTitle>
          <DialogDescription>
            Select an organization and assign their role in this activity.
          </DialogDescription>
        </DialogHeader>

        <div className="space-y-6 py-4">
          {/* Organization Selection */}
          <div className="space-y-2">
            <Label htmlFor="organization" className="flex items-center gap-2">
              Organization
              <HelpTextTooltip content="Select an existing organization from your database." />
            </Label>
            <OrganizationCombobox
              value={formData.organization_id || ''}
              onValueChange={(value) => setFormData(prev => ({ ...prev, organization_id: value }))}
              organizations={organizations}
              placeholder="Search for an organization..."
              disabled={orgsLoading || !!editingOrg}
            />
            {!editingOrg && (
              <p className="text-xs text-gray-500">
                Can't find your organization? Add it in the Organizations page first.
              </p>
            )}
          </div>

          {/* Role Selection */}
          <div className="space-y-2">
            <Label htmlFor="role" className="flex items-center gap-2">
              Organization Role
              <HelpTextTooltip content="The role of the organization in this activity according to IATI standard: Funding (provides funds), Accountable (legal responsibility), Extending (manages on behalf of funder), or Implementing (physically carries out)." />
            </Label>
            <EnhancedSearchableSelect
              groups={[{
                label: "Organization Roles",
                options: IATI_ORGANIZATION_ROLES.map(r => ({
                  code: r.code.toString(),
                  name: `${r.code} ${r.name}`,
                  description: r.description
                }))
              }]}
              value={formData.iati_role_code ? `${formData.iati_role_code} ${getOrganizationRoleName(formData.iati_role_code)}` : ''}
              onValueChange={handleRoleChange}
              placeholder="Select role..."
              searchPlaceholder="Search roles..."
            />
          </div>

          {/* Advanced Fields Toggle */}
          <Button
            type="button"
            variant="outline"
            size="sm"
            onClick={() => setShowAdvanced(!showAdvanced)}
            className="w-full flex items-center justify-center gap-2"
          >
            {showAdvanced ? (
              <>
                <ChevronUp className="h-4 w-4" />
                Hide Advanced IATI Fields
              </>
            ) : (
              <>
                <ChevronDown className="h-4 w-4" />
                Show Advanced IATI Fields
              </>
            )}
          </Button>

          {showAdvanced && (
            <div className="space-y-6 pt-4 border-t border-gray-200">
              <p className="text-sm text-gray-600">
                These optional fields provide additional IATI-compliant metadata for specialized reporting requirements.
              </p>

              {/* Activity ID Reference */}
              <div className="space-y-2">
                <Label htmlFor="activity_id_ref" className="flex items-center gap-2">
                  Related Activity IATI Identifier
                  <HelpTextTooltip content="The IATI identifier of a related activity if the organization also reports it. This corresponds to the @activity-id attribute in IATI XML." />
                </Label>
                <Input
                  id="activity_id_ref"
                  value={formData.activity_id_ref || ''}
                  onChange={(e) => setFormData(prev => ({ ...prev, activity_id_ref: e.target.value }))}
                  placeholder="e.g., GB-COH-1234567-PROJ001"
                />
              </div>

              {/* CRS Channel Code */}
              <div className="space-y-2">
                <Label htmlFor="crs_channel_code" className="flex items-center gap-2">
                  CRS Channel Code
                  <HelpTextTooltip content="OECD-DAC CRS (Creditor Reporting System) channel code, used mainly by bilateral donors for reporting to the DAC. This corresponds to the @crs-channel-code attribute." />
                </Label>
                <EnhancedSearchableSelect
                  groups={[{
                    label: "CRS Channel Codes",
                    options: [
                      { code: "11000", name: "11000 - Bilateral, unspecified", description: "Bilateral donor, unspecified channel" },
                      { code: "11001", name: "11001 - Bilateral, core contributions and pooled programmes and funds", description: "Core contributions to multilateral organizations" },
                      { code: "11002", name: "11002 - Bilateral, project-type interventions", description: "Project-specific bilateral aid" },
                      { code: "11003", name: "11003 - Bilateral, experts and other technical assistance", description: "Technical assistance and expertise" },
                      { code: "11004", name: "11004 - Bilateral, scholarships and student costs in donor countries", description: "Educational scholarships" },
                      { code: "11005", name: "11005 - Bilateral, debt relief", description: "Debt relief operations" },
                      { code: "11006", name: "11006 - Bilateral, administrative costs not included elsewhere", description: "Administrative costs" },
                      { code: "11007", name: "11007 - Bilateral, development awareness", description: "Development awareness activities" },
                      { code: "11008", name: "11008 - Bilateral, food aid", description: "Food assistance programs" },
                      { code: "11009", name: "11009 - Bilateral, aid untied", description: "Untied aid" },
                      { code: "11010", name: "11010 - Bilateral, aid tied", description: "Tied aid" },
                      { code: "11011", name: "11011 - Bilateral, export credits", description: "Export credit financing" },
                      { code: "11012", name: "11012 - Bilateral, equity investment", description: "Equity investments" },
                      { code: "11013", name: "11013 - Bilateral, other", description: "Other bilateral channels" }
                    ]
                  }]}
                  value={formData.crs_channel_code || ''}
                  onValueChange={(value) => setFormData(prev => ({ ...prev, crs_channel_code: value }))}
                  placeholder="Select CRS channel code..."
                  searchPlaceholder="Search channel codes..."
                />
              </div>
            </div>
          )}
        </div>

        <DialogFooter>
          <Button variant="outline" onClick={onClose} disabled={saving}>
            Cancel
          </Button>
          <Button 
            onClick={handleSubmit} 
            disabled={!formData.organization_id || !formData.role_type || saving}
          >
            {saving ? (
              <>Saving...</>
            ) : (
              <>
                {editingOrg ? <Save className="h-4 w-4 mr-2" /> : <Plus className="h-4 w-4 mr-2" />}
                {editingOrg ? 'Update' : 'Add'} Organization
              </>
            )}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
