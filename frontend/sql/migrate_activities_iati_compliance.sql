-- Migration: Align activities table with IATI Activity Standard
-- Author: Generated by AI Assistant
-- Date: 2025-01-27
-- Goal: Remove non-standard fields and rename created_by_org to reporting_org_id

-- ⚠️ IMPORTANT: This migration handles the activities_with_reporting_org view dependency
-- The view will be dropped and recreated without the removed columns

-- ⚠️ Step 0: Sanity check - Check current column names
SELECT column_name, data_type 
FROM information_schema.columns 
WHERE table_name = 'activities' 
AND column_name IN ('objectives', 'target_groups', 'created_by_org', 'created_by_org_name', 'created_by_org_acronym', 'reporting_org_id')
ORDER BY column_name;

---------------------------------------------
-- ✅ Step 1: Handle dependent views
---------------------------------------------
-- Store the view definition before dropping it
DO $$
DECLARE
    view_exists boolean;
BEGIN
    SELECT EXISTS (
        SELECT 1 FROM information_schema.views 
        WHERE table_name = 'activities_with_reporting_org'
    ) INTO view_exists;
    
    IF view_exists THEN
        RAISE NOTICE 'View activities_with_reporting_org exists and will be recreated without objectives/target_groups columns';
    END IF;
END $$;

-- Drop the view if it exists
DROP VIEW IF EXISTS public.activities_with_reporting_org CASCADE;

---------------------------------------------
-- ✅ Step 2: Remove non-IATI fields
---------------------------------------------
ALTER TABLE public.activities
DROP COLUMN IF EXISTS objectives CASCADE,
DROP COLUMN IF EXISTS target_groups CASCADE;

---------------------------------------------
-- ✅ Step 3: Handle created_by_org → reporting_org_id mapping
---------------------------------------------
-- Check what columns exist and handle accordingly
DO $$
DECLARE
    has_created_by_org boolean;
    has_reporting_org_id boolean;
BEGIN
    SELECT EXISTS(
        SELECT 1 FROM information_schema.columns 
        WHERE table_schema = 'public' 
        AND table_name = 'activities' 
        AND column_name = 'created_by_org'
    ) INTO has_created_by_org;
    
    SELECT EXISTS(
        SELECT 1 FROM information_schema.columns 
        WHERE table_schema = 'public' 
        AND table_name = 'activities' 
        AND column_name = 'reporting_org_id'
    ) INTO has_reporting_org_id;
    
    IF has_created_by_org AND has_reporting_org_id THEN
        -- Both columns exist, copy data from created_by_org to reporting_org_id if needed
        RAISE NOTICE 'Both created_by_org and reporting_org_id exist. Copying data if needed...';
        UPDATE public.activities 
        SET reporting_org_id = created_by_org 
        WHERE reporting_org_id IS NULL AND created_by_org IS NOT NULL;
        
        -- Drop the old column
        ALTER TABLE public.activities DROP COLUMN IF EXISTS created_by_org CASCADE;
        RAISE NOTICE 'Dropped created_by_org column';
        
    ELSIF has_created_by_org AND NOT has_reporting_org_id THEN
        -- Only created_by_org exists, rename it
        ALTER TABLE public.activities
        RENAME COLUMN created_by_org TO reporting_org_id;
        RAISE NOTICE 'Renamed created_by_org to reporting_org_id';
        
    ELSE
        -- reporting_org_id already exists or neither exists
        RAISE NOTICE 'reporting_org_id already exists or neither column exists';
    END IF;
END $$;

---------------------------------------------
-- ✅ Step 4: Add read-only reporting org display fields
---------------------------------------------
ALTER TABLE public.activities
ADD COLUMN IF NOT EXISTS created_by_org_name TEXT,
ADD COLUMN IF NOT EXISTS created_by_org_acronym TEXT;

---------------------------------------------
-- ✅ Step 5: Backfill reporting org display fields
---------------------------------------------
-- This links reporting_org_id → organizations.id
-- Then pulls in org name and acronym for display in the UI

UPDATE public.activities a
SET
  created_by_org_name = o.name,
  created_by_org_acronym = o.acronym
FROM public.organizations o
WHERE a.reporting_org_id = o.id
AND (a.created_by_org_name IS NULL OR a.created_by_org_acronym IS NULL);

---------------------------------------------
-- ✅ Step 6: Recreate the view without removed columns
---------------------------------------------
-- At this point, the columns have been cleaned up, so we can create a simple view
CREATE OR REPLACE VIEW public.activities_with_reporting_org AS
SELECT 
    a.*,
    -- Organization details from joined table
    o.name AS reporting_org_name,
    o.acronym AS reporting_org_acronym,
    o.iati_org_id AS reporting_org_ref,
    o.organisation_type AS reporting_org_type
FROM public.activities a
LEFT JOIN public.organizations o ON a.reporting_org_id = o.id;

-- Log what we did
DO $$
BEGIN
    RAISE NOTICE 'View activities_with_reporting_org recreated successfully';
    RAISE NOTICE 'The view now uses the cleaned-up activities table schema';
END $$;

-- Grant appropriate permissions
GRANT SELECT ON public.activities_with_reporting_org TO authenticated;
GRANT SELECT ON public.activities_with_reporting_org TO anon;

---------------------------------------------
-- ✅ Step 7: Verification Query
---------------------------------------------
SELECT
  a.id,
  a.iati_identifier,
  a.reporting_org_id,
  o.iati_org_id AS reporting_org_ref,
  o.organisation_type AS reporting_org_type,
  a.created_by_org_name,
  a.created_by_org_acronym
FROM public.activities a
LEFT JOIN public.organizations o ON a.reporting_org_id = o.id
LIMIT 10;

-- ✅ Summary of changes:
-- - Removed non-standard fields: objectives, target_groups
-- - Renamed created_by_org to reporting_org_id
-- - Added display fields: created_by_org_name, created_by_org_acronym
-- - Backfilled organization names from organizations table 