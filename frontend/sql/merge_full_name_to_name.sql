-- Migration: Merge full_name into name field and prepare for full_name removal
-- Date: Generated by migration script
-- Purpose: Consolidate full_name and name fields into a single name field

-- Step 1: Backup current data
CREATE TABLE IF NOT EXISTS organizations_backup AS 
SELECT * FROM organizations;

-- Step 2: Update organizations - merge full_name into name where name is empty
UPDATE organizations
SET name = COALESCE(
    NULLIF(TRIM(name), ''),
    NULLIF(TRIM(full_name), ''),
    'Unknown Organization'
)
WHERE name IS NULL OR name = '';

-- Step 3: Create change_log table if it doesn't exist
CREATE TABLE IF NOT EXISTS change_log (
    id SERIAL PRIMARY KEY,
    table_name VARCHAR(255),
    record_id UUID,
    field_name VARCHAR(255),
    old_value TEXT,
    new_value TEXT,
    changed_by VARCHAR(255),
    changed_at TIMESTAMP DEFAULT NOW(),
    change_type VARCHAR(50)
);

-- Step 4: Log changes only if change_log has the right structure
DO $$ 
BEGIN
    -- Check if change_log table has the expected columns
    IF EXISTS (
        SELECT 1 
        FROM information_schema.columns 
        WHERE table_name = 'change_log' 
        AND column_name = 'table_name'
    ) THEN
        -- Log the changes
        INSERT INTO change_log (
            table_name,
            record_id,
            field_name,
            old_value,
            new_value,
            changed_by,
            changed_at,
            change_type
        )
        SELECT 
            'organizations',
            id,
            'name',
            name,
            COALESCE(NULLIF(TRIM(name), ''), NULLIF(TRIM(full_name), ''), 'Unknown Organization'),
            'system_migration',
            NOW(),
            'full_name_merge'
        FROM organizations
        WHERE (name IS NULL OR name = '') AND (full_name IS NOT NULL AND full_name != '');
        
        RAISE NOTICE 'Changes logged to change_log table';
    ELSE
        RAISE NOTICE 'change_log table does not have expected structure - skipping logging';
    END IF;
END $$;

-- Step 5: Update any profiles table if it exists with full_name
DO $$ 
BEGIN
    IF EXISTS (
        SELECT 1 
        FROM information_schema.columns 
        WHERE table_name = 'profiles' AND column_name = 'full_name'
    ) THEN
        -- Update profiles
        UPDATE profiles
        SET name = COALESCE(
            NULLIF(TRIM(name), ''),
            NULLIF(TRIM(full_name), ''),
            'Unknown User'
        )
        WHERE name IS NULL OR name = '';
    END IF;
END $$;

-- Step 6: Update any rolodex_persons table if it exists
DO $$ 
BEGIN
    IF EXISTS (
        SELECT 1 
        FROM information_schema.columns 
        WHERE table_name = 'rolodex_persons' AND column_name = 'full_name'
    ) THEN
        -- Update rolodex_persons
        UPDATE rolodex_persons
        SET name = COALESCE(
            NULLIF(TRIM(name), ''),
            NULLIF(TRIM(full_name), ''),
            'Unknown Person'
        )
        WHERE name IS NULL OR name = '';
    END IF;
END $$;

-- Step 7: Create a view for backward compatibility during transition
CREATE OR REPLACE VIEW organizations_with_full_name AS
SELECT 
    *,
    name AS full_name  -- Map name to full_name for backward compatibility
FROM organizations;

-- Step 8: Summary report
SELECT 
    'Migration Summary' as report,
    COUNT(*) as total_organizations,
    COUNT(CASE WHEN full_name IS NOT NULL AND full_name != '' THEN 1 END) as had_full_name,
    COUNT(CASE WHEN name IS NULL OR name = '' THEN 1 END) as updated_names
FROM organizations;

-- Note: After verifying the migration, run the drop_full_name_column.sql script 

-- Run the check_database_status.sql script to see current state 